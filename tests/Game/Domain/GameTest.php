<?php

namespace App\Tests\Game\Domain;

use App\Game\Domain\Model\Game;

use App\Game\Domain\Model\Mark;
use App\Game\Domain\Model\Player;
use App\Game\Domain\Model\TilePosition;
use Exception;
use PHPUnit\Framework\TestCase;

class GameTest extends TestCase
{
    private Game $game;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->game = new Game();
    }

    public function test_addPlayersWithSameNick_mustThrowException()
    {
        $player1 = new Player("player1", "fa05b2ac-5988-42d6-a48d-ee62ad63ad01",Mark::createAsXMark());
        $player2 = new Player("player1", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02", Mark::createAsXMark());

        $this->game->addPlayer($player1);

        self::expectException(Exception::class);
        $this->game->addPlayer($player2);
    }

    public function test_addMoreThan2Players_MustThrowException()
    {
        $player1 = new Player("player1","fa05b2ac-5988-42d6-a48d-ee62ad63ad01", Mark::createAsXMark());
        $player2 = new Player("player2","fa05b2ac-5988-42d6-a48d-ee62ad63ad02", Mark::createAsOMark());
        $player3 = new Player("player3","fa05b2ac-5988-42d6-a48d-ee62ad63ad03", Mark::createAsXMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);

        self::expectException(Exception::class);

        $this->game->addPlayer($player3);
    }

    public function test_withoutPlayers_cannotStartGame_MustThrowException()
    {
        self::expectException(Exception::class);
        $this->game->startGame();
    }

    public function test_addOnlyOnePlayer_cannotStartGame_MustThrowException()
    {
        $player1 = new Player("player1", "fa05b2ac-5988-42d6-a48d-ee62ad63ad01",Mark::createAsXMark());
        $this->game->addPlayer($player1);
        self::expectException(Exception::class);

        $this->game->startGame();
    }

    public function test_startGame_boardMustBeClean()
    {
        $player1 = new Player("player1","fa05b2ac-5988-42d6-a48d-ee62ad63ad01", Mark::createAsXMark());
        $player2 = new Player("player2", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02",Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);


        $this->game->startGame();

        $this->assertTrue($this->game->getBoard()->isClean());
    }

    public function test_startGame_nextPlayerMustBePlayerOne()
    {
        $player1 = new Player("player1", "fa05b2ac-5988-42d6-a48d-ee62ad63ad01",Mark::createAsXMark());
        $player2 = new Player("player2", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02",Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);

        $this->game->startGame();

        $this->assertEquals($player1->getId(), $this->game->getNextPlayerId());
    }

    public function test_afterPlayer1IsPlayer2Turn()
    {
        $player1 = new Player("player1","fa05b2ac-5988-42d6-a48d-ee62ad63ad01", Mark::createAsXMark());
        $player2 = new Player("player2", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02",Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);
        $this->game->startGame();

        $this->game->playerMarks($player1, new TilePosition(1,1));

        $this->assertEquals($player2->getId(), $this->game->getNextPlayerId());

    }

    public function test_playerNotPlayAlternatively_mustThrowException()
    {
        $player1 = new Player("player1", "fa05b2ac-5988-42d6-a48d-ee62ad63ad01",Mark::createAsXMark());
        $player2 = new Player("player2", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02",Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);
        $this->game->startGame();

        $this->game->playerMarks($player1, new TilePosition(1,1));

        self::expectException(Exception::class);
        $this->game->playerMarks($player1, new TilePosition(1,2));

    }

    public function test_afterFewRound_gameIsNotOver()
    {
        $player1 = new Player("player1","fa05b2ac-5988-42d6-a48d-ee62ad63ad01", Mark::createAsXMark());
        $player2 = new Player("player2", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02",Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);
        $this->game->startGame();

        $this->game->playerMarks($player1, new TilePosition(1,1));
        $this->game->playerMarks($player2, new TilePosition(1,2));
        $this->game->playerMarks($player1, new TilePosition(1,3));

        self::assertFalse($this->game->isGameOver());
    }

    public function test_playerWin_gameIsOver()
    {
        $player1 = new Player("player1","fa05b2ac-5988-42d6-a48d-ee62ad63ad01", Mark::createAsXMark());
        $player2 = new Player("player2", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02",Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);
        $this->game->startGame();

        $this->game->playerMarks($player1, new TilePosition(1,1));
        $this->game->playerMarks($player2, new TilePosition(2,1));
        $this->game->playerMarks($player1, new TilePosition(1,3));
        $this->game->playerMarks($player2, new TilePosition(2,2));
        $this->game->playerMarks($player1, new TilePosition(1,2));

        self::assertTrue($this->game->isGameOver());
    }

    public function test_player1Win_winnerIsPlayer1()
    {
        $player1 = new Player("player1","fa05b2ac-5988-42d6-a48d-ee62ad63ad01", Mark::createAsXMark());
        $player2 = new Player("player2","fa05b2ac-5988-42d6-a48d-ee62ad63ad02", Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);
        $this->game->startGame();

        $this->game->playerMarks($player1, new TilePosition(1,1));
        $this->game->playerMarks($player2, new TilePosition(2,1));
        $this->game->playerMarks($player1, new TilePosition(1,3));
        $this->game->playerMarks($player2, new TilePosition(2,2));
        $this->game->playerMarks($player1, new TilePosition(1,2));

        self::assertEquals($player1, $this->game->getWinner());
    }

    public function test_gameIsOver_playerTryToPlay_mustThrowException()
    {
        $player1 = new Player("player1", "fa05b2ac-5988-42d6-a48d-ee62ad63ad01",Mark::createAsXMark());
        $player2 = new Player("player2","fa05b2ac-5988-42d6-a48d-ee62ad63ad02", Mark::createAsOMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);
        $this->game->startGame();

        $this->game->playerMarks($player1, new TilePosition(1,1));
        $this->game->playerMarks($player2, new TilePosition(2,1));
        $this->game->playerMarks($player1, new TilePosition(1,3));
        $this->game->playerMarks($player2, new TilePosition(2,2));
        $this->game->playerMarks($player1, new TilePosition(1,2));

        self::expectException(Exception::class);

        $this->game->playerMarks($player2, new TilePosition(3,3));
    }

    public function test_playerMark_PlayerNotExists_mustThrowException(){
        $player1 = new Player("player1", "fa05b2ac-5988-42d6-a48d-ee62ad63ad01",Mark::createAsXMark());
        $player2 = new Player("player2", "fa05b2ac-5988-42d6-a48d-ee62ad63ad02",Mark::createAsOMark());
        $player3 = new Player("player3", "fa05b2ac-5988-42d6-a48d-ee62ad63ad03",Mark::createAsXMark());
        $this->game->addPlayer($player1);
        $this->game->addPlayer($player2);
        $this->game->startGame();

        self::expectException(Exception::class);

        $this->game->playerMarks($player3, new TilePosition(1,1));
    }
}
