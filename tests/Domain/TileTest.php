<?php

namespace App\Tests\Domain;

use App\Domain\Tile;
use PHPUnit\Framework\TestCase;

class TileTest extends TestCase
{
    private Tile $tile;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->tile = new Tile();
    }

    public function test_markTileWithX_mustReturnIsXTrue()
    {
        $this->tile->markWithX();

        self::assertTrue($this->tile->isX());
    }

    public function test_markTileWithX_mustReturnIsOFalse()
    {
        $this->tile->markWithX();

        self::assertFalse($this->tile->isO());
    }

    public function test_markTileWithO_mustReturnIsOTrue()
    {
        $this->tile->markWithO();

        self::assertTrue($this->tile->isO());
    }

    public function test_markTileWithO_mustReturnIsXFalse()
    {
        $this->tile->markWithO();

        self::assertFalse($this->tile->isX());
    }

    public function test_tileAlreadyMarked_markTileWithO_mustThrowException()
    {
        $this->tile->markWithO();

        self::expectException(\Exception::class);
        $this->tile->markWithX();

    }

    public function test_tileAlreadyMarked_markTileWithX_mustThrowException()
    {
        $this->tile->markWithX();

        self::expectException(\Exception::class);

        $this->tile->markWithO();
    }

    public function test_cleanTileAfterX_mustReturnIsCleanTrue()
    {
        $this->tile->markWithX();
        $this->tile->clean();

        self::assertTrue($this->tile->isClean());
    }

    public function test_cleanTileAfterO_mustReturnIsCleanTrue()
    {
        $this->tile->markWithO();
        $this->tile->clean();

        self::assertTrue($this->tile->isClean());
    }

    public function test_cleanTileAfterX_mustReturnIsOandIsXFalse()
    {
        $this->tile->markWithX();
        $this->tile->clean();

        self::assertFalse($this->tile->isO());
        self::assertFalse($this->tile->isX());
    }

    public function test_cleanTileAfterO_mustReturnIsOandIsXFalse()
    {
        $this->tile->markWithO();
        $this->tile->clean();

        self::assertFalse($this->tile->isO());
        self::assertFalse($this->tile->isX());
    }

    public function test_sameOfX()
    {
        $tile1 = new Tile();
        $tile1->markWithX();
        $tile2 = new Tile();
        $tile2->markWithX();

        self::assertTrue($tile1->markedAs($tile2));
    }

    public function test_sameOfO()
    {
        $tile1 = new Tile();
        $tile1->markWithO();
        $tile2 = new Tile();
        $tile2->markWithO();

        self::assertTrue($tile1->markedAs($tile2));
    }

    public function test_sameOfEmpty()
    {
        $tile1 = new Tile();
        $tile2 = new Tile();

        self::assertTrue($tile1->markedAs($tile2));
    }

    public function test_tilesWithXAndO_markedAsReturnFalse()
    {
        $tile1 = new Tile();
        $tile1->markWithX();
        $tile2 = new Tile();
        $tile2->markWithO();

        self::assertFalse($tile1->markedAs($tile2));
    }

    public function test_tilesWithXAndClean_markedAsReturnFalse()
    {
        $tile1 = new Tile();
        $tile1->markWithX();
        $tile2 = new Tile();

        self::assertFalse($tile1->markedAs($tile2));
    }

    public function test_tilesWithOAndclean_markedAsReturnFalse()
    {
        $tile1 = new Tile();
        $tile1->markWithO();
        $tile2 = new Tile();

        self::assertFalse($tile1->markedAs($tile2));
    }
}
