<?php

namespace App\Tests\Domain;

use App\Domain\Game;
use App\Domain\Tile;
use App\Domain\TilePosition;
use Exception;
use PHPUnit\Framework\MockObject\Stub\ReturnStub;
use PHPUnit\Framework\TestCase;

class GameTest extends TestCase
{
    private Game $game;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->game = new Game();
    }

    public function test_addPlayers_player1MustBeO_player2MustBeX()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");

        $players = $this->game->getPlayers();

        self::assertTrue($players[0]->isO());
        self::assertTrue($players[1]->isX());
    }

    public function test_addMoreThan2Players_MustThrowException()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");

        self::expectException(Exception::class);

        $this->game->addPlayer("player3");
    }

    public function test_withoutPlayers_cannotStartGame_MustThrowException()
    {
        self::expectException(Exception::class);
        $this->game->startGame();
    }

    public function test_addOnlyOnePlayer_cannotStartGame_MustThrowException()
    {
        $this->game->addPlayer("player1");
        self::expectException(Exception::class);

        $this->game->startGame();
    }

    public function test_startGame_boardMustBeClean()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");

        $this->game->startGame();

        $this->assertTrue($this->game->getBoard()->isClean());
    }

    public function test_startGame_nextPlayerMustBePlayerOne()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");

        $this->game->startGame();

        $this->assertTrue($this->game->isPlayer1Turn());
    }

    public function test_afterPlayer1IsPlayer2Turn()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");
        $this->game->startGame();

        $this->game->player1Mark(new TilePosition(1,1));

        $this->assertTrue($this->game->isPlayer2Turn());
    }

    public function test_playerNotPlayAlternatively_mustThrowException()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");
        $this->game->startGame();

        $this->game->player1Mark(new TilePosition(1,1));

        self::expectException(Exception::class);
        $this->game->player1Mark(new TilePosition(1,1));

    }

    public function test_afterFewRound_gameIsNotOver()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");
        $this->game->startGame();

        $this->game->player1Mark(new TilePosition(1,1));
        $this->game->player2Mark(new TilePosition(1,2));
        $this->game->player1Mark(new TilePosition(2,2));

        self::assertFalse($this->game->isGameOver());
    }

    public function test_playerWin_gameIsOver()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");
        $this->game->startGame();

        $this->game->player1Mark(new TilePosition(1,1));
        $this->game->player2Mark(new TilePosition(3,3));
        $this->game->player1Mark(new TilePosition(1,2));
        $this->game->player2Mark(new TilePosition(2,3));
        $this->game->player1Mark(new TilePosition(1,3));

        self::assertTrue($this->game->isGameOver());
    }

    public function test_player1Win_winnerIsPlayer1()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");
        $this->game->startGame();

        $this->game->player1Mark(new TilePosition(1,1));
        $this->game->player2Mark(new TilePosition(3,3));
        $this->game->player1Mark(new TilePosition(1,2));
        $this->game->player2Mark(new TilePosition(2,3));
        $this->game->player1Mark(new TilePosition(1,3));

        self::assertEquals($this->game->getPlayer1(), $this->game->getWinner());
    }

    public function test_gameIsOver_playerTryToPlay_mustThrowException()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");
        $this->game->startGame();

        $this->game->player1Mark(new TilePosition(1,1));
        $this->game->player2Mark(new TilePosition(3,3));
        $this->game->player1Mark(new TilePosition(1,2));
        $this->game->player2Mark(new TilePosition(2,3));
        $this->game->player1Mark(new TilePosition(1,3));

        self::expectException(Exception::class);

        $this->game->player2Mark(new TilePosition(2,2));
    }


    public function test_gameIsOver_restartGame_BoardIsClean()
    {
        $this->game->addPlayer("player1");
        $this->game->addPlayer("player2");
        $this->game->startGame();
        $this->game->player1Mark(new TilePosition(1,1));
        $this->game->player2Mark(new TilePosition(3,3));
        $this->game->player1Mark(new TilePosition(1,2));
        $this->game->player2Mark(new TilePosition(2,3));
        $this->game->player1Mark(new TilePosition(1,3));

        $this->game->resetGame();

        self::assertTrue($this->game->getBoard()->isClean());
        self::assertFalse($this->game->isGameOver());
        self::assertNull($this->game->getPlayer1());
        self::assertNull($this->game->getPlayer2());


    }
}
